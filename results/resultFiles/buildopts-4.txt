
 scriptFileName: scripts/buildopts-4.txt
   logFileName: results/runLogs/buildopts-4.txt
resultFileName: results/resultFiles/buildopts-4.txt
outputFileName: 
reboot

RESET: 0 0 ?    0 ?

RESET: 1 0 ?    0 ?

RESET: 2 0 ?    0 ?

RESET: 3 0 ?    0 ?

RESET: 4 0 ?    0 ?

RESET: 5 0 ?    0 ?

RESET: 6 0 ?    0 ?
Prop0 Cog6 ok
cr c" here: " .cstr here W@ . (version) .cstr cr cr

here: 14416 STARTKERNEL6.0-2015Oct17 16:59-0

Prop0 Cog6 ok
[ifndef $C_varEnd
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_rsTop
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_rsBot
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_stTop
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_this
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_stBot
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg6
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg5
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg4
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg3
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_cogdata
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_stTOS
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_rsPtr
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_stPtr
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_resetDreg
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_fLongMask
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_fAddrMask
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_fCondMask
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_fDestInc
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPop_ret
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPop1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPop
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stpopC_treg_ret
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPop_ret
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPop1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPop
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stpopC_treg
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPush_ret
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPush1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_rsPush
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPush_ret
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPush1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_stPush
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_lasterr
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_reset
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_0branch
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_(+loop)
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_(loop)
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_>r
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_2>r
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_r>
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__maskoutlo
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__maskouthi
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__maskin
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_next
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_exit
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_litw1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_litw
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_litl
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_doconl
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_dovarw
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_dovarl
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_doconw
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_branch
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_COG!
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_ST!
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_RS!
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_COGat
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_STat
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_RSat
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_drop
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm2>0
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm1>1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm2>1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm2>1IMM
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm2>flag
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a__xasm2>flagIMM
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_a_lxasm
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_IP
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg2
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef $C_treg1
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
1 wconstant asm.f
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef variable
.
.
.
.
.
.
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
variable asmDestBuffer -1 asmDestBuffer L!
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
\ stringmap mapname ( -- )
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
[ifndef stringmap
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
: stringmap


create forthentry $C_a_dovarw w,


;
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
]
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
\ defineLocalLabel ( addr cstr -- )
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
: defineLocalLabel


lockdict ccreate $C_a_doconw w, w, forthentry freedict


;
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
: definePatch


lockdict ccreate


$H_cq w, dup here W@ ccopy C@ 1+ allot herewal


$C_a_litw w, h1FF and swap if h8000 or then w,


$C_a_exit w,


forthentry freedict


;
Prop0 Cog6 ok

Prop0 Cog6 ok

Prop0 Cog6 ok
\ padnw ( -- t/f ) move past current word and parse the next word, true if there is a next word
Prop0 Cog6 ok
[ifndef padnw
Prop0 Cog6 ok
: padnw
 nextword
 parsebl
;
Prop0 Cog6 ok
]
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ (forget) ( cstr -- ) wind the dictionary back to the word which follows - caution
Prop0 Cog6 ok
[ifndef (forget)
Prop0 Cog6 ok
: (forget)
 dup
 if
  find
  if
   pfa>nfa nfa>lfa dup here W! W@ wlastnfa W!
  else
   _p?
   if
    .cstr h3F emit cr
   then
  then
 else
  drop
 then
;
Prop0 Cog6 ok
]
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ forget ( -- ) wind the dictionary back to the word which follows - caution
Prop0 Cog6 ok
[ifndef forget
Prop0 Cog6 ok
: forget
 parsenw (forget)
;
Prop0 Cog6 ok
]
Prop0 Cog6 ok
\ string/word ( cstr word -- )
Prop0 Cog6 ok
[ifndef string/word
Prop0 Cog6 ok
: string/word
 swap here W@ over C@ 1+ allot herewal ccopy w,
;
Prop0 Cog6 ok
]  
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ string/word_lookup ( cstr map -- cstr 0 | word -1)
Prop0 Cog6 ok
[ifndef string/word_lookup
Prop0 Cog6 ok
: string/word_lookup
 0 rot2
 begin
  2dup cstr=
  if
   C@++ + alignw dup W@ 1 ST! -1 2 ST! -1
  else
   C@++ + alignw 2+ dup C@ 0=
  then
 until
 drop swap
;
Prop0 Cog6 ok
]
Prop0 Cog6 ok
\ string/long ( cstr long -- )
Prop0 Cog6 ok
[ifndef string/long
Prop0 Cog6 ok
: string/long
 swap here W@ over C@ 1+ allot herewal ccopy l,
;
Prop0 Cog6 ok
]  
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ string/long_lookup ( cstr map -- cstr 0 | long -1)
Prop0 Cog6 ok
[ifndef string/long_lookup
Prop0 Cog6 ok
: string/long_lookup
 0 rot2
 begin
  2dup cstr=
  if
   C@++ + alignl dup L@ 1 ST! -1 2 ST! -1
  else
   C@++ + alignl 4+ dup C@ 0=
  then
 until
 drop swap
;
Prop0 Cog6 ok
]
Prop0 Cog6 ok
[ifndef lastdef
Prop0 Cog6 ok
\ lastdef ( c-addr -- t/f ) true if this is the most recently defined word 
Prop0 Cog6 ok
: lastdef
 lastnfa over _dictsearch dup
 if
  =
 else
  2drop -1
 then
; 
Prop0 Cog6 ok
]
Prop0 Cog6 ok
\
Prop0 Cog6 ok
wvariable _numPatches 0 _numPatches W!
Prop0 Cog6 ok
wvariable _asmerror 0 _asmerror W!
Prop0 Cog6 ok
\
Prop0 Cog6 ok
wvariable _asmaddr 0 _asmaddr W!
Prop0 Cog6 ok
\
Prop0 Cog6 ok
0 wconstant _image
Prop0 Cog6 ok

Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asm, ( long -- )
Prop0 Cog6 ok
: asm,
 _image _asmaddr W@ 0 max h1EF min 4* + L!
 1 _asmaddr W+!
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asm! ( long addr -- )
Prop0 Cog6 ok
: asm!
 0 max h1EF min 4* _image + L!
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asm@ ( addr -- long )
Prop0 Cog6 ok
: asm@
 0 max h1EF min 4* _image + L@
;
Prop0 Cog6 ok
\ isLocalLabel ( cstr -- t/f)
Prop0 Cog6 ok
: isLocalLabel
  dup c" __" npfx swap c" C_" npfx or
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ : localLabelPrefix
Prop0 Cog6 ok
\ c" __"
Prop0 Cog6 ok
\ ;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ patchName ( n -- cstr) uses tbuf
Prop0 Cog6 ok
: patchName
 c" __%%" tbuf ccopy <# # # # # #> tbuf cappend tbuf
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ definePatch ( dstflag addr cstr1 cstr2 -- ) create a word named cstr2
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ worddefinedbycstr2 ( -- cstr1 n1) 
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ addPatch ( dstflag addr cstr1 -- )
Prop0 Cog6 ok
: addPatch
 _numPatches W@ patchName definePatch
 1 _numPatches W+!
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
lockdict stringmap _cnd
Prop0 Cog6 ok
c" if_always"  h003C string/word
Prop0 Cog6 ok
c" if_never"  0 string/word
Prop0 Cog6 ok
c" if_e"  h0028 string/word
Prop0 Cog6 ok
c" if_ne"  h0014 string/word
Prop0 Cog6 ok
c" if_a"  h0004 string/word
Prop0 Cog6 ok
c" if_b"  h0030 string/word
Prop0 Cog6 ok
c" if_ae"  h000C string/word
Prop0 Cog6 ok
c" if_be"  h0038 string/word
Prop0 Cog6 ok
c" if_c"  h0030 string/word
Prop0 Cog6 ok
c" if_nc"  h000C string/word
Prop0 Cog6 ok
c" if_z"  h0028 string/word
Prop0 Cog6 ok
c" if_nz"  h0014 string/word
Prop0 Cog6 ok
c" if_c_eq_z"  h0024 string/word
Prop0 Cog6 ok
c" if_c_ne_z"  h0018 string/word
Prop0 Cog6 ok
c" if_c_and_z"  h0020 string/word
Prop0 Cog6 ok
c" if_c_and_nz"  h0010 string/word
Prop0 Cog6 ok
c" if_nc_and_z"  h0008 string/word
Prop0 Cog6 ok
c" if_nc_and_nz" h0004 string/word
Prop0 Cog6 ok
c" if_c_or_z"  h0038 string/word
Prop0 Cog6 ok
c" if_c_or_nz"  h0034 string/word
Prop0 Cog6 ok
c" if_nc_or_z"  h002C string/word
Prop0 Cog6 ok
c" if_nc_or_nz"  h001C string/word
Prop0 Cog6 ok
c" if_z_eq_c"  h0024 string/word
Prop0 Cog6 ok
c" if_z_ne_c"  h0018 string/word
Prop0 Cog6 ok
c" if_z_and_c"  h0020 string/word
Prop0 Cog6 ok
c" if_z_and_nc"  h0008 string/word
Prop0 Cog6 ok
c" if_nz_and_c"  h0010 string/word
Prop0 Cog6 ok
c" if_nz_and_nc" h0004 string/word
Prop0 Cog6 ok
c" if_z_or_c"  h0038 string/word
Prop0 Cog6 ok
c" if_z_or_nc"  h002C string/word
Prop0 Cog6 ok
c" if_nz_or_c"  h0034 string/word
Prop0 Cog6 ok
c" if_nz_or_nc"  h001C string/word
Prop0 Cog6 ok
c" "   0  string/word
Prop0 Cog6 ok
freedict
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
lockdict stringmap _asmds
Prop0 Cog6 ok
c" abs"  hA8BC string/word
Prop0 Cog6 ok
c" absneg" hACBC string/word
Prop0 Cog6 ok
c" add"  h80BC string/word
Prop0 Cog6 ok
c" addabs" h88BC string/word
Prop0 Cog6 ok
c" adds" hD0BC string/word
Prop0 Cog6 ok
c" addsx" hD8BC string/word
Prop0 Cog6 ok
c" addx" hC8BC string/word
Prop0 Cog6 ok
c" and"  h60BC string/word
Prop0 Cog6 ok
c" andn" h64BC string/word
Prop0 Cog6 ok
c" cmp"  h843C string/word
Prop0 Cog6 ok
c" cmps" hC03C string/word
Prop0 Cog6 ok
c" cmpsub" hE03C string/word
Prop0 Cog6 ok
c" cmpsx" hC43C string/word
Prop0 Cog6 ok
c" cmpx" hCC3C string/word
Prop0 Cog6 ok
c" djnz" hE4BC string/word
Prop0 Cog6 ok
c" jmpret" h5CBC string/word
Prop0 Cog6 ok
c" max"  h4CBC string/word
Prop0 Cog6 ok
c" maxs" h44BC string/word
Prop0 Cog6 ok
c" min"  h48BC string/word
Prop0 Cog6 ok
c" mins" h40BC string/word
Prop0 Cog6 ok
c" mov"  hA0BC string/word
Prop0 Cog6 ok
c" movd" h54BC string/word
Prop0 Cog6 ok
c" movi" h58BC string/word
Prop0 Cog6 ok
c" movs" h50BC string/word
Prop0 Cog6 ok
c" muxc" h70BC string/word
Prop0 Cog6 ok
c" muxnc" h74BC string/word
Prop0 Cog6 ok
c" muxnz" h7CBC string/word
Prop0 Cog6 ok
c" muxz" h78BC string/word
Prop0 Cog6 ok
c" neg"  hA4BC string/word
Prop0 Cog6 ok
c" negc" hB03C string/word
Prop0 Cog6 ok
c" negnc" hB4BC string/word
Prop0 Cog6 ok
c" negnz" hBCBC string/word
Prop0 Cog6 ok
c" negz" hB9BC string/word
Prop0 Cog6 ok
c" or"  h68BC string/word
Prop0 Cog6 ok
c" rdbyte"  h00BC string/word
Prop0 Cog6 ok
c" rdlong" h08BC string/word
Prop0 Cog6 ok
c" rdword" h04BC string/word
Prop0 Cog6 ok
c" rcl"  h34BC string/word
Prop0 Cog6 ok
c" rcr"  h30BC string/word
Prop0 Cog6 ok
c" rev"  h3CBC string/word
Prop0 Cog6 ok
c" rol"  h24BC string/word
Prop0 Cog6 ok
c" ror"  h20BC string/word
Prop0 Cog6 ok
c" sar"  h38BC string/word
Prop0 Cog6 ok
c" shl"  h2CBC string/word
Prop0 Cog6 ok
c" shr"  h28BC string/word
Prop0 Cog6 ok
c" sub"  h84BC string/word
Prop0 Cog6 ok
c" subabs" h8CBC string/word
Prop0 Cog6 ok
c" subs" hD4BC string/word
Prop0 Cog6 ok
c" subsx" hDCBC string/word
Prop0 Cog6 ok
c" subx" hCCBC string/word
Prop0 Cog6 ok
c" sumc" h90BC string/word
Prop0 Cog6 ok
c" sumnc" h94BC string/word
Prop0 Cog6 ok
c" sumnz" h9CBC string/word
Prop0 Cog6 ok
c" sumz" h98BC string/word
Prop0 Cog6 ok
c" test" h603C string/word
Prop0 Cog6 ok
c" testn" h643C string/word
Prop0 Cog6 ok
c" tjnz" hE83C string/word
Prop0 Cog6 ok
c" tjz"  hEC3C string/word
Prop0 Cog6 ok
c" waitcnt" hF8BC string/word
Prop0 Cog6 ok
c" waitpeq" hF03C string/word
Prop0 Cog6 ok
c" waitpne" hF43C string/word
Prop0 Cog6 ok
c" waitvid" hFC3C string/word
Prop0 Cog6 ok
c" wrbyte" h003C string/word
Prop0 Cog6 ok
c" wrlong" h083C string/word
Prop0 Cog6 ok
c" wrword" h043C string/word
Prop0 Cog6 ok
c" xor"  h6CBC string/word
Prop0 Cog6 ok
c" "  0 string/word
Prop0 Cog6 ok
freedict
Prop0 Cog6 ok
\
Prop0 Cog6 ok
lockdict stringmap _asmd
Prop0 Cog6 ok
c" clkset" h0C7C0000 string/long
Prop0 Cog6 ok
c" cogid" h0CFC0001 string/long
Prop0 Cog6 ok
c" coginit" h0C7C0002 string/long
Prop0 Cog6 ok
c" cogstop" h0C7C0003 string/long
Prop0 Cog6 ok
c" lockclr" h0C7C0007 string/long
Prop0 Cog6 ok
c" locknew" h0CFC0004 string/long
Prop0 Cog6 ok
c" lockret" h0C7C0005 string/long
Prop0 Cog6 ok
c" lockset" h0C7C0006 string/long
Prop0 Cog6 ok
c" "  0 string/long
Prop0 Cog6 ok
freedict
Prop0 Cog6 ok
\
Prop0 Cog6 ok
lockdict stringmap _asms
Prop0 Cog6 ok
c" jmp"  h5C3C string/word
Prop0 Cog6 ok
c" long" 0 string/word
Prop0 Cog6 ok
c" "  0 string/word
Prop0 Cog6 ok
freedict
Prop0 Cog6 ok
\
Prop0 Cog6 ok
lockdict stringmap _asm
Prop0 Cog6 ok
c" nop"  0 string/long
Prop0 Cog6 ok
c" ret"  h5C7C0000 string/long
Prop0 Cog6 ok
c" jnext"  $C_a_next h5C7C0000 or string/long
Prop0 Cog6 ok
c" jexit" $C_a_exit h5C7C0000 or string/long
Prop0 Cog6 ok
c" spush" $C_a_stPush $C_a_stPush_ret h9 lshift or h5CFC0000 or string/long
Prop0 Cog6 ok
c" spopt" $C_a_stpopC_treg $C_a_stpopC_treg_ret h9 lshift or h5CFC0000 or string/long
Prop0 Cog6 ok
c" spop" $C_a_stPop $C_a_stPop_ret h9 lshift or h5CFC0000 or string/long
Prop0 Cog6 ok
c" rpush" $C_a_rsPush $C_a_rsPush_ret h9 lshift or h5CFC0000 or string/long
Prop0 Cog6 ok
c" rpop"  $C_a_rsPop $C_a_rsPop_ret h9 lshift or h5CFC0000 or string/long
Prop0 Cog6 ok
c" "  0 string/long
Prop0 Cog6 ok
freedict
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ _lu ( cstr map -- cstr 0 | n1 -1) 
Prop0 Cog6 ok
: _lu
 string/word_lookup dup if swap h10 lshift swap then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ cnd ( cstr -- cstr 0 | n1 -1 ) process the condition statement n1 is the mask to apply if successful 
Prop0 Cog6 ok
: cnd 
 _cnd _lu
;
Prop0 Cog6 ok
\ 
Prop0 Cog6 ok
\ asminstds ( cstr -- cstr 0 | n1 -1 ) process op codes with a destination and a source
Prop0 Cog6 ok
: asminstds
 _asmds _lu
;
Prop0 Cog6 ok
\ 
Prop0 Cog6 ok
\ asminstd ( cstr -- cstr 0 | n1 -1 ) process opcodes with a destination only 
Prop0 Cog6 ok
: asminstd
 _asmd string/long_lookup 
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asminsts ( cstr -- cstr 0 | n1 -1 ) process opcodes with a source only
Prop0 Cog6 ok
: asminsts
 _asms _lu
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asminst ( cstr -- cstr 0 | n1 -1 ) process the only opcode with no dest or source
Prop0 Cog6 ok
: asminst
 _asm string/long_lookup 
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmerr ( cstr cstr -- ) report an error and consume all the keys left
Prop0 Cog6 ok
: asmerr
 .cstr .cstr cr padbl clearkeys -1 _asmerror W!
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ evalop3 ( t/f cstr -- cstr n1 ) t/f 0 - source op, -1 dest op, evaluate the operand as either as a forth word, a number,
Prop0 Cog6 ok
\ or a local label
Prop0 Cog6 ok
: evalop3
 hFDEB0317 rot2
\ forth word
 dup 
 find -1 =
\ ( t/f cstr addr flag -- )
 if
\ need to make sure the stack value is right
\ ( t/f cstr addr  -- )
  execute
\ ( t/f cstr value -- )
  rot drop
\ ( cstr value -- )
 else
\ ( t/f cstr cstr -- )
  isLocalLabel
  if
\ ( t/f cstr -- )
   tuck
\ ( cstr t/f cstr -- )
   _asmaddr W@ swap addPatch
   0
\ ( cstr 0 -- )
  else
\ ( t/f cstr -- )
   nip dup
\ ( cstr cstr -- )
   dup C@++ xisnumber
   if
    C@++ xnumber
   else
    c" ? " asmerr 0
   then
\ ( cstr value -- )
  then
 then
\ ( cstr value -- )
 rot hFDEB0317 <>
 if
  over c" ? " asmerr
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ evalop2 ( t/f cstr -- n1 ) t/f 0 - source op, -1 dest op, evaluate the operand as either as a forth word, a number,
Prop0 Cog6 ok
\ or a local label
Prop0 Cog6 ok
: evalop2
 evalop3
\ ( cstr value -- )
 nip
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ evalop1 ( t/f cstr -- n1 ) t/f 0 - source op, -1 dest op, evaluate the operand as either as a forth word, a number,
Prop0 Cog6 ok
\ or a local label
Prop0 Cog6 ok
: evalop1
 evalop3
\ ( cstr value -- )
 dup 0 h1FF between
 if
  nip
 else
  drop c" ? " asmerr 0
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ evalop ( t/f cstr -- n1 ) t/f 0 - source op, -1 dest op, evaluate the operand as either as a forth word, a number,
Prop0 Cog6 ok
\ or a local label
Prop0 Cog6 ok
: evalop
 evalop1 h1FF and
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmsrc ( n1 -- n1 ) n1 is the asm opcode, can be modified to set the immediate bit, the operand is evaluated as
Prop0 Cog6 ok
\ a forth word/number
Prop0 Cog6 ok
: asmsrc
 padnw 
 if
  pad>in c" #" cstr=
  if
   h00400000 or padnw
  else
   -1
  then
  if
   0 pad>in evalop or 0
  else
   -1
  then
 else
  -1
 then
 if
  c" Source Operand" c"  ?" asmerr
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmdst ( n1 -- n1 ) n1 is the asm opcode
Prop0 Cog6 ok
: asmdst
 padnw
 if
  -1 pad>in evalop h9 lshift or 0
 else
  -1
 then
 if
  ." Dest Operand" c"  ?" asmerr
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ (label) ( n1 n2 -- n3 n4 ) check to make sure the rest of the pad is empty
Prop0 Cog6 ok
\ if not generate an error and set n3 = -1 & n4 = 0
Prop0 Cog6 ok
: (label)
 padnw
 if
  pad>in c" Unexpected data after a label:" asmerr drop -1 swap
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmopend ( n2 n1 -- n3 ) or in the update conditions
Prop0 Cog6 ok
: asmopend
 padnw
 if
  begin
   pad>in dup 1+ C@ 27 <> 
   if
    dup c" wc" cstr= if drop h01000000 or else
    dup c" wz" cstr= if drop h02000000 or else
    dup c" wr" cstr= if drop h00800000 or else
    dup c" nr" cstr= if drop hFF7FFFFF and else
    c" Unexpected word " asmerr then then then then  
   else
    drop padbl
   then
   padnw 0=
  until
 then
 dup 0=
 if
  nip
 else
  hFFC3FFFF and or
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmdstsrc ( n1 -- n1 )
Prop0 Cog6 ok
: asmdstsrc
 asmdst padnw 
 if
  pad>in c" ," cstr=
  if
   asmsrc 0
  else
   -1
  then
   else -1
 then
 if
  ." Expected" c"  ," asmerr
 else
  asmopend
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmdone ( cogstart -- )
Prop0 Cog6 ok
: asmdone
 _numPatches W@
 if
 _numPatches W@ 0 
  do
   i patchName find
   if
    execute
\ ( cstr patch_addr -- )
    swap find
    if
\ ( patch_addr addr -- )
     execute
\ ( patch_addr patch_data -- )
     swap dup h8000 and swap h7FFF and swap
\ (  patch_data patch_addr destFlag -- )
     over asm@ swap
\ (  patch_data patch_addr ASMINST destFlag -- )
     if
\ (  patch_data patch_addr ASMINST -- )
      rot h9 lshift or swap asm!
     else
      rot or swap asm!
     then
    else
\ ( patch_addr cstr -- )
     nip c" Undefined Label "
     asmerr
     cr
    then
   else
    c" Undefined Patch " asmerr
    cr
   then
  loop
 then
\
 _asmerror W@
 if
  drop
 else
  _asmaddr W@
  asmDestBuffer L@ -1 =
  if
   ." lockdict create " padnw
   if
    pad>in .cstr space
   else
    ." defasm "
   then
   ." forthentry" cr
   ." $C_a_lxasm w, "
   2dup
   h68 emit u. space h68 emit u. 
   ."  1- tuck - h9 lshift swap h1FF and or here W@ alignl h10 lshift or l," cr
  then
  swap 0 rot2
  do
   
   i asm@
   asmDestBuffer L@ -1 <>
   if
    asmDestBuffer L@ L! asmDestBuffer L@ 4+ asmDestBuffer L!
   else
    dup 0=
    if
     drop ." 0 l, "
    else
     h68 emit base W@ h10 base W! swap u. base W!
\     h7A emit base W@ h40 base W! swap u. base W!
     ." l, "
    then
    1+ dup h8 >=
    if
     drop
     0 cr
    then
   then
  loop
  drop
  cr ." freedict" cr
 then
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ asmline ( -- t/f )
Prop0 Cog6 ok
: asmline
 parsebl dup
 if
  pad>in 1+ C@ dup h27 <> swap h5C <> and and
 then
 0=
\ not a blank line, and not a comment line
 if
  padbl
  0 0
 else
  pad>in c" ;asm" name= 

\ assembler done
  if
   -1 0
  else
\ we have a local label
   pad>in isLocalLabel
   if
    _asmaddr W@ pad>in defineLocalLabel
    0 0 (label) nextword
   else
\ process the condition, default to "if_always"
    pad>in cnd
    if
     padnw
     if
      0 swap -1
     else
      c" Opcode"
      c"  ?" asmerr
      -1 0
     then
    else
     drop 0 h003C0000 -1
    then
   then
  then
 then
\
 if
  pad>in asminst
\ process in the op-code, source, dest, and update flags
  if
   asmopend asm,
  else
   asminsts
   if
    asmsrc asmopend asm,
   else
    asminstd
    if
     asmdst asmopend asm,
    else
     asminstds
     if
      asmdstsrc asm,
     else
      2drop 0 pad>in evalop2 asm, nextword
 thens
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\ _rasms
Prop0 Cog6 ok
: _rasms
 lockdict
 _image 0=
 if
  herelal here W@ d_512 4* allot
  c" _image" find
  if
   2+ W!
  then
 then
 _image d_512 4* 0 fill

 _asmaddr W!
 base W@ hex
 1 _asmaddr W+!
 0 _asmerror W!

 0 c" __%%ASM" defineLocalLabel
\  
 0 _numPatches W!
 _asmaddr W@
 begin
  accept
  0 >in W!
  asmline
  dup 0=
  if
   parsenw dup
   if
    c" ?" swap asmerr
   else
    drop
   then
  then
  _asmerror W@ or
 until
 _asmerror W@
 if
  drop
 else
  cr cr
  asmdone
  padbl
 then

 cr cr
;
Prop0 Cog6 ok
\ _rasme
Prop0 Cog6 ok
: _rasme
 padnw
 drop
 base W!
\ 
\
 c" __%%ASM" (forget)
\
 freedict
;
Prop0 Cog6 ok
\ :rasm ( asmaddr -- )
Prop0 Cog6 ok
: :rasm
 -1 asmDestBuffer L!
  _rasms
  _rasme
;
Prop0 Cog6 ok
\
Prop0 Cog6 ok
\
Prop0 Cog6 ok
: :asm
 coghere W@ :rasm
;
Prop0 Cog6 ok

Prop0 Cog6 ok
: asmoptsymgen
 lastnfa
 begin

  dup c" C_" npfx
  if
   dup lastdef
   if
    ." [ifndef $" dup .strname ." ~h0D~h09h"
    dup nfa>pfa 2+ W@ . ." wconstant $" dup .strname ." ~h0D]~h0D"
   then
  then  
  nfa>next dup 0=
 until
 drop
 cr cr 
;
Prop0 Cog6 ok
: asmsymgen
 lastnfa
 begin
  dup c" C_" npfx
  if
   dup lastdef
   if
    ." h" dup nfa>pfa 2+ W@ . ." wconstant $" dup .strname cr
   then
  then  
  nfa>next dup 0=
 until
 drop
 cr cr 
;
Prop0 Cog6 ok

Prop0 Cog6 ok
hA state orC!

 scriptFileName: scripts/buildopts-4.txt
   logFileName: results/runLogs/buildopts-4.txt
resultFileName: results/resultFiles/buildopts-4.txt
outputFileName: results/outputFiles/BootOptimize.f

 scriptFileName: scripts/buildopts-4.txt
   logFileName: results/runLogs/buildopts-4.txt
resultFileName: results/resultFiles/buildopts-4.txt
outputFileName: 
Prop0 Cog6 ok
hA state orC!

 scriptFileName: scripts/buildopts-4.txt
   logFileName: results/runLogs/buildopts-4.txt
resultFileName: results/resultFiles/buildopts-4.txt
outputFileName: results/outputFiles/mpOptimize.f

 scriptFileName: scripts/buildopts-4.txt
   logFileName: results/runLogs/buildopts-4.txt
resultFileName: results/resultFiles/buildopts-4.txt
outputFileName: 
Prop0 Cog6 ok
reboot

RESET: 0 0 ?    0 ?

RESET: 1 0 ?    0 ?

RESET: 2 0 ?    0 ?

RESET: 3 0 ?    0 ?

RESET: 4 0 ?    0 ?

RESET: 5 0 ?    0 ?

RESET: 6 0 ?    0 ?
Prop0 Cog6 ok
